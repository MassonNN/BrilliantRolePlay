/*
 *
 * (c) Copyright 2016-2017, LLC CSR COMMUNITY
 *
 *
 * ќсновные функции дл€ значени€ INT(без точки)
 * GetBalanceCSRInt("Andrew_Nest"); - возвращает кол-во донат очков - (-1) - акк несуществует
 * SetBalanceCSRInt("Andrew_Nest",0); - оннулирует донат очки у игрока - (-1) - акк несуществует (вместо 0 - можно поставить 100, в этом случае донат очки примут значение 100)
 * GiveBalanceCSRInt("Andrew_Nest",-100); - изымает с баланса 100 донат очков - (-1) - акк несуществует
 * SetNameCSR("Andrew_Nest","Lena_Nest"); - измен€ет ник в базе данных доната, если это не сделать, то донат очки вайпнутс€ (старый ник, новый ник)
 *
 * ќсновные функции дл€ значени€ Float(с плавающей точкой)
 * GetBalanceCSRFloat("Andrew_Nest"); - возвращает кол-во донат очков - (-1) - акк несуществует
 * SetBalanceCSRFloat("Andrew_Nest",0.00); - оннулирует донат очки у игрока - (-1) - акк несуществует(вместо 0.00 - можно поставить 100.00, в этом случае донат очки примут значение 100.00)
 * GiveBalanceCSRFloat("Andrew_Nest",-100.00); - изымает с баланса 100 донат очков - (-1) - акк несуществует
 * SetNameCSR("Andrew_Nest","Lena_Nest"); - измен€ет ник в базе данных доната, если это не сделать, то донат очки вайпнутс€ (старый ник, новый ник)
 */
stock GetBalanceCSRInt(nicknamecsr[])//--------------------------------------------получение баланса игрока
{
	new type_data_csr;
	new idscsr[64];
	format(idscsr,sizeof(idscsr),"csr/conf.ini");
	new iniOpencsr;
	iniOpencsr = csr_openFile(idscsr);
	if(iniOpencsr == -1 || iniOpencsr == -2){iniOpencsr = csr_createFile(idscsr);csr_setInteger(iniOpencsr, "TypeCredits",1);}
    csr_getInteger(iniOpencsr, "TypeCredits",type_data_csr);
	csr_closeFile(iniOpencsr);
	//--------------------------------------------------------------------------
	new CreditsInt;
	format(idscsr,sizeof(idscsr),"csr/%s.ini",nicknamecsr);//---проверка существовани€ пользовател€
	iniOpencsr = csr_openFile(idscsr);
	if(iniOpencsr == -1 || iniOpencsr == -2) {csr_closeFile(iniOpencsr);return -1;}
	csr_getInteger(iniOpencsr, "CreditsINT",CreditsInt);
	csr_closeFile(iniOpencsr);
	if(type_data_csr == 1){
        return CreditsInt;
	}
	if(type_data_csr == 2){
		return -1;
	}
	return -1;
}
stock GetBalanceCSRFloat(nicknamecsr[])//--------------------------------------------получение баланса игрока
{
	new type_data_csr;
	new idscsr[64];
	format(idscsr,sizeof(idscsr),"csr/conf.ini");
	new iniOpencsr;
	iniOpencsr = csr_openFile(idscsr);
	if(iniOpencsr == -1 || iniOpencsr == -2){iniOpencsr = csr_createFile(idscsr);csr_setInteger(iniOpencsr, "TypeCredits",1);}
    csr_getInteger(iniOpencsr, "TypeCredits",type_data_csr);
	csr_closeFile(iniOpencsr);
	//--------------------------------------------------------------------------
	new Float:CreditsFloat;
	format(idscsr,sizeof(idscsr),"csr/%s.ini",nicknamecsr);//---проверка существовани€ пользовател€
	iniOpencsr = csr_openFile(idscsr);
	if(iniOpencsr == -1 || iniOpencsr == -2) {csr_closeFile(iniOpencsr);return -1;}
	csr_getFloat(iniOpencsr, "CreditsFLOAT",CreditsFloat);
	csr_closeFile(iniOpencsr);
	if(type_data_csr == 1){
        return -1;
	}
	if(type_data_csr == 2){
		return CreditsFloat;
	}
	return -1;
}
//------------------------------------------------------------------------------
stock SetBalanceCSRInt(nicknamecsr[],newbalancecsr)//---------------------------изменение баланса CSR на конкретное значение Int
{
    new iniOpencsr;
    new idscsr[64],balncesusercsr;
	format(idscsr,sizeof(idscsr),"csr/%s.ini",nicknamecsr);//---проверка существовани€ пользовател€
	iniOpencsr = csr_openFile(idscsr);
	if(iniOpencsr == -1 || iniOpencsr == -2) {csr_closeFile(iniOpencsr);return -1;}
	csr_setFloat(iniOpencsr, "CreditsINT",balncesusercsr);
	csr_setInteger(iniOpencsr, "CreditsINT",newbalancecsr);
	csr_closeFile(iniOpencsr);
 	balncesusercsr = newbalancecsr-balncesusercsr;
	new textforlogcsr[256];
	if(balncesusercsr > 0)
	{
		format(textforlogcsr,256,"Donate:%s:+%d",nicknamecsr,balncesusercsr);
	}else{
        format(textforlogcsr,256,"Donate:%s:%d",nicknamecsr,balncesusercsr);
	}
	InputLogsCSR(textforlogcsr);
	return 1;
}
stock SetBalanceCSRFloat(nicknamecsr[],Float:newbalancecsr)//-------------------изменение баланса CSR на конкретное значение Float
{
    new idscsr[64],Float:balncesusercsr;
	format(idscsr,sizeof(idscsr),"csr/%s.ini",nicknamecsr);//---проверка существовани€ пользовател€
	iniOpencsr = csr_openFile(idscsr);
	if(iniOpencsr == -1 || iniOpencsr == -2) {csr_closeFile(iniOpencsr);return -1;}
	csr_getFloat(iniOpencsr, "CreditsFLOAT",balncesusercsr);
	csr_setFloat(iniOpencsr, "CreditsFLOAT",newbalancecsr);
	csr_closeFile(iniOpencsr);
 	balncesusercsr = newbalancecsr-balncesusercsr;
	new textforlogcsr[256];
	if(balncesusercsr > 0)
	{
		format(textforlogcsr,256,"Donate:%s:+%d",nicknamecsr,balncesusercsr);
	}else{
        format(textforlogcsr,256,"Donate:%s:%d",nicknamecsr,balncesusercsr);
	}
	InputLogsCSR(textforlogcsr);
	return 1;
}
//------------------------------------------------------------------------------
stock GiveBalanceCSRInt(nicknamecsr[],setbalancecsr)//--------------------------изменение баланса CSR Int
{
    new idscsr[64],balncesusercsr;
	format(idscsr,sizeof(idscsr),"csr/%s.ini",nicknamecsr);//---проверка существовани€ пользовател€
	iniOpencsr = csr_openFile(idscsr);
	if(iniOpencsr == -1 || iniOpencsr == -2) {csr_closeFile(iniOpencsr);return -1;}
	csr_getInteger(iniOpencsr, "CreditsINT",balncesusercsr);
	csr_setInteger(iniOpencsr, "CreditsINT",balncesusercsr+setbalancecsr);
	csr_closeFile(iniOpencsr);
	new textforlogcsr[256];
	if(setbalancecsr > 0)
	{
		format(textforlogcsr,256,"Donate:%s:+%d",nicknamecsr,setbalancecsr);
	}else{
        format(textforlogcsr,256,"Donate:%s:%d",nicknamecsr,setbalancecsr);
	}
	InputLogsCSR(textforlogcsr);
	return 1;
}
stock GiveBalanceCSRFloat(nicknamecsr[],Float:setbalancecsr)//------------------изменение баланса CSR Float
{
    new idscsr[64],FLoat:balncesusercsr;
	format(idscsr,sizeof(idscsr),"csr/%s.ini",nicknamecsr);//---проверка существовани€ пользовател€
	iniOpencsr = csr_openFile(idscsr);
	if(iniOpencsr == -1 || iniOpencsr == -2) {csr_closeFile(iniOpencsr);return -1;}
	csr_getFloat(iniOpencsr, "CreditsFLOAT",balncesusercsr);
	csr_setFloat(iniOpencsr, "CreditsFLOAT",balncesusercsr+setbalancecsr);
	csr_closeFile(iniOpencsr);
	new textforlogcsr[256];
	if(setbalancecsr > 0)
	{
		format(textforlogcsr,256,"Donate:%s:+%.2f",nicknamecsr,setbalancecsr);
	}else{
        format(textforlogcsr,256,"Donate:%s:%.2f",nicknamecsr,setbalancecsr);
	}
	InputLogsCSR(textforlogcsr);
	return 1;
}
//------------------------------------------------------------------------------
stock InputLogsCSR(logtext[])
{
	new hourcsr,minutecsr,secondcsr,yearcsr,monthcsr,daycsr;
	gettime(hourcsr, minutecsr, secondcsr);
	getdate(yearcsr, monthcsr, daycsr);
	new stringcsr[255], stringcsr2[128], File: logs_csr;
	format(stringcsr2, sizeof(stringcsr2), "csr/logs2.txt");//------------------логирование транзакции
	logs_csr = fopen(stringcsr2, io_append);
	format(stringcsr, sizeof(stringcsr), "%s(%d:%d:%d|%d.%d.%d)\n",logtext,hourcsr,minutecsr,secondcsr,daycsr,monthcsr,yearcsr);
	fwrite(logs_csr, stringcsr);
	fclose(logs_csr);
	return 1;
}
stock SetNameCSR(nicknamecsrold,nicknamecsrnew)
{
    new idscsr[64];
	format(idscsr,sizeof(idscsr),"csr/%s.ini",nicknamecsrold);//---проверка существовани€ пользовател€
	iniOpencsr = csr_openFile(idscsr);
	if(iniOpencsr == -1 || iniOpencsr == -2) {csr_closeFile(iniOpencsr);return -1;}
    format(idscsr,sizeof(idscsr),"csr/%s.ini",nicknamecsrnew);
	csr_rename_file (iniOpencsr,idscsr,1);
	csr_closeFile(iniOpencsr);
}
//########################—Ќ»«” MX_INI##########################################



#if defined _mxCSR_included
    #endinput
#endif
#define _mxCSR_included





const

    // настройки

    // –≈ ќћ≈Ќƒ”≈“—я »«ћ≈Ќ»“№ ѕќƒ —≈Ѕя
    CSR_MAX_OPENED_FILES    = 2,        // максимум, открытых одновременно, файлов
    CSR_MAX_FILE_SIZE       = 65536,    // байт,        макс. размер файла
    CSR_MAX_FILENAME_SIZE   = 128,      // символов,    макс. размер пути к файлу
    CSR_MAX_KEYS_IN_FILE    = 2048,     // максимум ключей в открытом файле

    // в ќ«” будет выделено дл€ временного хранени€ файлов примерно вот столько байт:
    // CSR_MAX_OPENED_FILES * ( CSR_MAX_FILE_SIZE + CSR_MAX_FILENAME_SIZE*4 + CSR_MAX_KEYS_IN_FILE*4 )


    // Ќ≈Ћ№«я ћ≈Ќя“№
    CSR_INTEGER_SIZE        = 12,       // размер строки с целочисленным значением
    CSR_FLOAT_SIZE          = 40,       // размер строки с дробным числовым значением

    CSR_STRING_DELIMITER    = '\n',     // разделитель строк
    CSR_DELIMITER           = '=',      // разделитель ключа и значени€


    // коды ошибок, возвращаемые функци€ми

    // –≈ ќћ≈Ќƒ”≈“—я Ќ≈ »«ћ≈Ќя“№
    CSR_OK                  =  0,       // функци€ успешно выполнена

        // провер€ть на ошибку можно так:
        // if ( возвращаемое_значение_функции < 0 ) ...

    CSR_FILE_NOT_FOUND      = -1,       // файл не найден по указанному пути
    CSR_FILE_ALREADY_EXIST  = -2,       // файл не найден по указанному пути
    CSR_TOO_LARGE_FILE      = -3,       // размер файла превысил допустимый лимит
    CSR_WRONG_PATH_SIZE     = -4,       // неправильный размер пути к файлу
    CSR_READ_ERROR          = -5,       // ошибка чтени€ файла
    CSR_WRITE_ERROR         = -6,       // ошибка при записи в файл
    CSR_NO_FREE_SLOT        = -7,       // нет свободного слота дл€ открыти€ файла
    CSR_WRONG_SLOT          = -8,       // указан неверный слот открытого файла
    CSR_KEY_NOT_FOUND       = -9,       // ключ в открытом файле не найден
    CSR_WRONG_RETURN_SIZE   = -10,      // размер строки, в которую будет помещено значение ключа - указан неверно (<= 0)


    // другие вспомогательные константы

    // Ќ≈Ћ№«я ћ≈Ќя“№
    cellbytes = cellbits / charbits;    // кол-во байт в одной €чейке





// списки разных символов дл€ оператора case в одной из функций

// –≈ ќћ≈Ќƒ”≈“—я Ќ≈ »«ћ≈Ќя“№
#define CSR_SPACE_CHAR  ' ', '\t'                       // строковые пробельные символы
#define CSR_KEY_STARTS  ' ', '\t', '\r', '\n', '\0'     // символы, перед началом ключа
#define CSR_STRING_ENDS '\r', '\n', '\0'                // символы, завершающие значение
#define CSR_NUMBER_ENDS ' ', '\t', '\r', '\n', '\0'     // символы, завершающие численное значение





static stock

    // временное хранилище открытых файлов

    _csr_nSlotUsed      [ CSR_MAX_OPENED_FILES ],                               // флаг: зан€т ли слот
    _csr_nFileChanged   [ CSR_MAX_OPENED_FILES ],                               // флаг: был ли изменен файл
    _csr_nFileBusy      [ CSR_MAX_OPENED_FILES ],                               // флаг: измен€етс€ ли в данный момент содержимое файла
    _csr_nFileSize      [ CSR_MAX_OPENED_FILES ],                               // размер открытого файла
    _csr_nDelimPos      [ CSR_MAX_OPENED_FILES ] [ CSR_MAX_KEYS_IN_FILE ],      // список позиций CSR_DELIMITER
    _csr_nKeysCount     [ CSR_MAX_OPENED_FILES ],                               // кол-во ключей открытого файла
    _csr_szFilePath     [ CSR_MAX_OPENED_FILES ] [ CSR_MAX_FILENAME_SIZE ],     // путь к файлу
    _csr_szFileContent  [ CSR_MAX_OPENED_FILES ] [ CSR_MAX_FILE_SIZE char ];    // контент файла





















/*
    —оздает и сразу открывает INI файл дл€ чтени€/записи.
    ѕќƒ–ќЅЌ≈≈
        ‘айл создаетс€ только в ќ«”, и в него записываетс€ строка szDefaultContent.
        ¬ szDefaultContent могут быть и ключи, которые потом парсер также будет видеть.
        “олько при закрытии файла, его содержимое будет записано на диск
        по указанному пути к файлу.
    ѕј–јћ≈“–џ:
        szFilePath[]        путь к файлу
        szDefaultContent    контент файла по умолчанию, обычно, можно не указывать
    ¬≈–Ќ≈“:
        код ошибки < 0 или »ƒ_открытого_файла
*/
stock csr_rename_file ( file_id, new_file_name[], delete_old_file = 1 )
{
    // если указан неверный слот
    if ( file_id < 0 || file_id >= MAX_OPENED_FILES || fUsed == 0 )
        return INI_WRONG_FILE_ID;

    // если нужно удалить старый файл
    if ( delete_old_file )
    {
        // узнаем им€ файла
        new fName[MAX_FILENAME_SIZE];
        getproperty( STORE_MACHINE, _, file_id, fName );
        strunpack( fName, fName );

        // удалим старый файл
        fremove(fName);
    }

    // сохраним новое им€ файла в propety массиве
    setproperty( STORE_MACHINE, _, file_id, new_file_name );

    // выставим настройки файла
    fChanged = 1;

    return CSR_OK;
}
stock csr_createFile ( szFilePath[], szDefaultContent[] = "" )
{
    //
    //  несколько блоков с проверками
    //

    // ------------
    new nFileNameSize = strlen( szFilePath ); // узнаем размер пути

    // если размер пути неправильный
    if ( nFileNameSize <= 0 || nFileNameSize >= CSR_MAX_FILENAME_SIZE )
        return CSR_WRONG_PATH_SIZE; // вернем код ошибки
    // ------------


    // ------------
    if ( fexist( szFilePath ) ) // если файл уже существует
        return CSR_FILE_ALREADY_EXIST; // вернем код ошибки - файл уже существует

    for ( new slot = 0; slot < CSR_MAX_OPENED_FILES; slot++ ) // перебор всех слотов ќ«”
        if // если уже есть такой открытый файл
        (
                _csr_nSlotUsed[slot] != 0
            &&  strcmp( szFilePath, _csr_szFilePath[slot], false ) == 0
        )
            return CSR_FILE_ALREADY_EXIST; // вернем код ошибки - файл уже существует
    // ------------



    // ------------
    new nFileSize = strlen( szDefaultContent ); // узнаем размер контентa файла по умолчанию

    // если размер неправильный
    if ( nFileSize < 0 || nFileSize >= CSR_MAX_FILE_SIZE )
        return CSR_TOO_LARGE_FILE; // вернем код ошибки
    // ------------




    //
    //  поиск свободного слота дл€ записи в ќ«”
    //

    for ( new slot = 0; slot < CSR_MAX_OPENED_FILES; slot++ ) // перебор всех слотов ќ«”
    {
        if ( _csr_nSlotUsed[slot] != 1 ) // если слот найден
        {
            // ------------
            _csr_nSlotUsed[slot]        = 1; // застолбим найденное место
            _csr_nFileChanged[slot]     = 0; // файл не был изменен
            _csr_nFileSize[slot]        = nFileSize; // скопируем размер файла в слот
            _csr_nKeysCount[slot]       = 0; // кол-во ключей выставим 0
            // ------------


            // ------------
            // скопируем в ќ«” весь файл,
            // запомнив все позиции CSR_DELIMITER и их кол-во
            for ( new i = 0;  i < nFileSize && i < CSR_MAX_FILE_SIZE;  i++ )
            {
                if (
                        szDefaultContent[i] == CSR_DELIMITER // если символ это CSR_DELIMITER
                    &&  _csr_nKeysCount[slot] < CSR_MAX_KEYS_IN_FILE // и лимит ключей еще не исчерпан
                ) {
                    _csr_nDelimPos[slot][ _csr_nKeysCount[slot] ] = i; // добавим еще одну позицию CSR_DELIMITER
                    _csr_nKeysCount[slot]++; // увеличим кол-во найденных ключей
                }

                _csr_szFileContent[slot]{i} = szDefaultContent[i];
            }

            _csr_szFileContent[slot]{nFileSize} = 0; // символ конца строки дл€ контента
            // ------------


            // ------------
            // скопируем в озу путь к файлу
            memcpy( _csr_szFilePath[slot], szFilePath, 0, nFileNameSize * cellbytes );

            _csr_szFilePath[slot][nFileNameSize] = 0; // символ конца строки дл€ пути
            // ------------


            return slot; // вернем »ƒ слота
        }
    }




    //
    //  если свободный слот в пам€ти не найден
    //

    return CSR_NO_FREE_SLOT; // вернем код ошибки
    // ------------
}




/*
    ќткрывает INI файл дл€ чтени€/записи, если он существует.
    ѕќƒ–ќЅЌ≈≈
         опирует в ќ«” с диска всЄ содержимое файла, если его размер не превышает
        допустимый. ≈сли кол-во ключей в файле больше допустимого, ошибки никакой не будет,
        просто при чтении/записи значений, парсер не будет видеть лишние ключи.
    ѕј–јћ≈“–џ:
        szFilePath[]    путь к файлу
    ¬≈–Ќ≈“:
        код ошибки < 0 или »ƒ_открытого_файла
*/

stock csr_openFile ( szFilePath[] )
{
    //
    //  несколько блоков с проверками
    //

    // ------------
    new nFileNameSize = strlen( szFilePath ); // узнаем размер пути

    // если размер пути неправильный
    if ( nFileNameSize <= 0 || nFileNameSize >= CSR_MAX_FILENAME_SIZE )
        return CSR_WRONG_PATH_SIZE; // вернем код ошибки
    // ------------


    if ( ! fexist( szFilePath ) ) // если файл не найден
        return CSR_FILE_NOT_FOUND; // вернем код ошибки


    // ------------
    // проверка - открыт ли уже файл с таким именем
    for ( new slot = 0; slot < CSR_MAX_OPENED_FILES; slot++ ) // перебор всех слотов ќ«”
        if // если уже есть такой открытый файл
        (
                _csr_nSlotUsed[slot] != 0
            &&  strcmp( szFilePath, _csr_szFilePath[slot], false ) == 0
        )
            return slot; // просто вернем его слот
    // ------------


    // ------------
    new File: pFile = fopen( szFilePath, io_read ); // пытаемс€ открыть файл дл€ чтени€

    if ( ! pFile ) // если файл не открылс€
        return CSR_READ_ERROR; // вернем код ошибки
    // ------------


    // ------------
    new nFileSize = flength( pFile ); // узнаем размер файла

    if ( nFileSize >= CSR_MAX_FILE_SIZE ) // если размер файла слишком большой
    {
        fclose(pFile); // закроем файл
        return CSR_TOO_LARGE_FILE; // вернем код ошибки
    }
    // ------------




    //
    //  поиск свободного слота дл€ записи в ќ«”
    //

    // ------------
    for ( new slot = 0; slot < CSR_MAX_OPENED_FILES; slot++ ) // перебор всех слотов ќ«”
    {
        if ( _csr_nSlotUsed[slot] != 1 ) // если слот найден
        {
            // ------------
            _csr_nSlotUsed[slot]        = 1; // застолбим найденное место
            _csr_nFileChanged[slot]     = 0; // файл не был изменен
            _csr_nFileSize[slot]        = nFileSize; // скопируем размер файла в слот
            _csr_nKeysCount[slot]       = 0; // кол-во ключей выставим 0
            // ------------


            // ------------
            // скопируем в ќ«” весь файл,
            // запомнив все позиции CSR_DELIMITER и их кол-во
            for ( new i = 0, symbol, nextstr = 1; i < nFileSize && i < CSR_MAX_FILE_SIZE; i++ )
            {
                symbol = fgetchar( pFile, 0, false ); // читаем из файла следующий символ

                if ( symbol == CSR_STRING_DELIMITER ) // если начинаетс€ нова€ строка
                    nextstr = 1;

                if (
                        nextstr // если обрабатываетс€ следующа€ строка
                    &&  symbol == CSR_DELIMITER // если символ это CSR_DELIMITER
                    &&  _csr_nKeysCount[slot] < CSR_MAX_KEYS_IN_FILE // и лимит ключей еще не исчерпан
                ) {
                    _csr_nDelimPos[slot][ _csr_nKeysCount[slot] ] = i; // добавим еще одну позицию CSR_DELIMITER
                    _csr_nKeysCount[slot]++; // увеличим кол-во найденных ключей
                    nextstr = 0; // сбрасываем информацию о новой строке
                }

                _csr_szFileContent[slot]{i} = symbol;
            }

            _csr_szFileContent[slot]{nFileSize} = 0; // символ конца строки дл€ контента

            fclose(pFile); // закроем файл
            // ------------


            // ------------
            // скопируем в озу путь к файлу
            memcpy( _csr_szFilePath[slot], szFilePath, 0, nFileNameSize * cellbytes );

            _csr_szFilePath[slot][nFileNameSize] = 0; // символ конца строки дл€ пути
            // ------------


            return slot; // вернем »ƒ слота
        }
    }
    // ------------




    //
    //  если свободный слот в пам€ти не найден
    //

    // ------------
    fclose(pFile); // закроем файл

    return CSR_NO_FREE_SLOT; // вернем код ошибки
    // ------------
}




/*
    «акрывает INI файл, если он был открыт.
    ѕќƒ–ќЅЌ≈≈
        ≈сли файл не был изменен - освободит слот дл€ хранени€ файла в ќ«”.
        ≈сли файл был изменен - полностью перезапишет файл на диске.
    ѕј–јћ≈“–џ:
        nFilePointer    »ƒ_открытого_файла, полученный от csr_openFile / csr_createFile
    ¬≈–Ќ≈“:
        код ошибки < 0 или 0 при успехе
*/

stock csr_closeFile ( nFilePointer )
{
    if
    (   // если »ƒ открытого файла указан верно
            nFilePointer >= 0
        &&  nFilePointer < CSR_MAX_OPENED_FILES
        &&  _csr_nSlotUsed[nFilePointer] != 0
    )
    {
        if ( _csr_nFileChanged[nFilePointer] != 0 ) // если файл был изменен
        {
            new File: pFile = fopen( _csr_szFilePath[nFilePointer], io_write ); // пытаемс€ открыть файл дл€ записи

            if ( ! pFile ) // если файл не открылс€
                return CSR_WRITE_ERROR; // вернем код ошибки

            // запишем контент файла из ќ«” на диск
            for ( new i = 0;  i < _csr_nFileSize[nFilePointer];  i++ )
                fputchar( pFile, _csr_szFileContent[nFilePointer]{i}, false );

            fclose(pFile); // закроем файл
        }

        _csr_nSlotUsed[nFilePointer] = 0; // освободить слот открытого файла

        return CSR_OK; // вернуть код об успешном выполнении функции
    }

    return CSR_WRONG_SLOT; // вернуть код: неверный указатель на открытый файл
}











/*
    ѕолучает из открытого INI файла значение указанного ключа.
    ѕќƒ–ќЅЌ≈≈
        ѕарсер ищет в ќ«” в контенте файла указанный ключ и помещает в
        szReturnValue его строковое значение. szReturnValue нужно создать заранее.
        nSizeOfReturn можно не указывать, если только не нужно точное кол-во
        возвращаемых символов в строке (в описании этого параметра ниже даны
        дополнительные указани€).
         ак ключ так и значение в файле, могут быть любой длины и
        могут содержать любые символы, кроме 2 символов конца строки \r и \n.
        ѕарсер не видит пробелы и знаки табул€ции вокруг имени ключа и
        перед значением, он считает их отступами.
    ѕј–јћ≈“–џ:
        nFilePointer        »ƒ_открытого_файла, полученный от csr_openFile / csr_createFile
        szKeyName[]         им€ ключа
        szReturnValue[]     сюда будет помещено значение ключа в виде строки
        nSizeOfReturn       макс. размер возвращаемой строки, обычно, это размер szReturnValue.
                            если ваша строка szReturnValue €вл€етс€ частью массива, который был создан с помощью enum,
                            этот параметр нужно об€зательно указывать как число
    ¬≈–Ќ≈“:
        код ошибки < 0 или 0 при успехе
*/

stock csr_getString ( nFilePointer, szKeyName[], szReturnValue[], nSizeOfReturn = sizeof(szReturnValue) )
{
    // ----------------
    if // если »ƒ открытого файла указан неверно
    (
            nFilePointer < 0
        ||  nFilePointer >= CSR_MAX_OPENED_FILES
        ||  _csr_nSlotUsed[nFilePointer] != 1
    )
        return CSR_WRONG_SLOT; // вернуть код: неверный указатель на открытый файл
    // ----------------


    if ( nSizeOfReturn <= 0 ) // если по какой-то причине размер возвращаемого значени€ указан/рассчитан как 0
        return CSR_WRONG_RETURN_SIZE;


    // ----------------
    new nKeyLen = strlen(szKeyName); // узнаем длину имени указанного ключа

    if ( nKeyLen <= 0 ) // если указан пустой ключ
        return CSR_KEY_NOT_FOUND;
    // ----------------


    // ----------------
    for // перебор и сравнение всех ключей файла с указанным ключом
    (
        new kPos = 0, curFilePos, found = 0;
        kPos < _csr_nKeysCount[nFilePointer];
        kPos++
    )
    {
        // ----------------
        found = 0; // флаг, найдена ли позици€ конца ключа = 0

        for // ищем позицию конца ключа
        (
            curFilePos = _csr_nDelimPos[nFilePointer][kPos] - 1; // текущ. поз. файла = поз. текущ. CSR_DELIMITER - 1
            curFilePos >= 0; // продолжать пока поз. файла >= 0
            curFilePos-- // после каждого повтора текущ. поз. файла -= 1
        )
        {
            switch ( _csr_szFileContent[nFilePointer]{curFilePos} ) // узнаем что за символ в текущ. поз. файла
            {
                case CSR_SPACE_CHAR :           continue; // если это пробельный символ, перейдем к пред. символу файла
                case CSR_STRING_DELIMITER :     break; // если это конец строки
                default : // если это другой символ
                {
                    found = 1; // позици€ конца ключа найдена
                    break; // конец цикла
                }
            }
        }

        // если позици€ конца ключа не найдена, переход к след. позиции CSR_DELIMITER
        if ( found != 1 ) continue;
        // ----------------


        // сравниваем посимвольно текущий ключ файла и указанный ключ
        for ( new curKeyPos = nKeyLen - 1;  curKeyPos >= 0;  curFilePos--, curKeyPos-- )
        {
            if
            (
                    curFilePos < 0 // если поз файла стала < 0
                ||  _csr_szFileContent[nFilePointer]{curFilePos} != szKeyName[curKeyPos] // если символы из ключей не равны
                ||  _csr_szFileContent[nFilePointer]{curFilePos} == CSR_STRING_DELIMITER // если символ из ключа это CSR_STRING_DELIMITER
            )
            {
                found = 0; // флаг, ключ не найден
                break; // конец сравнени€
            }
        }


        // ----------------
        if ( found != 0 ) // если указанный ключ найден в файле
        {
            // если найдено совпадение не целого ключа файла, а его окончани€ с указанным ключом
            if ( curFilePos >= 0 )
            {
                switch ( _csr_szFileContent[nFilePointer]{curFilePos} )
                {
                    case CSR_KEY_STARTS : {}
                    default: continue;
                }
            }


            // ----------------
            // текуща€ позици€ в файле будет на 1 больше текущей позиции CSR_DELIMITER
            curFilePos = _csr_nDelimPos[nFilePointer][kPos] + 1;

            // ищем позицию начала значени€, она будет помещена в curFilePos
            for ( ; ; curFilePos++ )
            {
                if ( curFilePos >= _csr_nFileSize[nFilePointer] ) break;

                switch ( _csr_szFileContent[nFilePointer]{curFilePos} )
                {
                    case CSR_SPACE_CHAR :   continue; // если это пробельный символ, перейдем к след. символу
                    default :               break; // если это другой символ
                }
            }
            // ----------------


            // ----------------
            // скопируем посимвольно в szReturnValue значение ключа из файла
            // воспользуемс€ созданной переменной found как позицией в возвращаемом значении
            for ( found = 0;  found < nSizeOfReturn;  found++, curFilePos++ )
            {
                switch ( _csr_szFileContent[nFilePointer]{curFilePos} )
                {
                    case CSR_STRING_ENDS : // если это символ конца значени€
                    {
                        szReturnValue[found] = 0; // запишем символ конца строки
                        break; // конец копировани€
                    }
                    default :
                        // копируем символ из файла в szReturnValue
                        szReturnValue[found] = _csr_szFileContent[nFilePointer]{curFilePos};
                }
            }

            szReturnValue[nSizeOfReturn - 1] = 0; // на вс€кий случай обрежем правильно строку

            return CSR_OK;
            // ----------------
        }
        // ----------------
    }
    // ----------------


    // ----------------
    return CSR_KEY_NOT_FOUND;
    // ----------------
}




/*
    ѕолучает из открытого INI файла целочисленное значение указанного ключа.
    ѕќƒ–ќЅЌ≈≈
        ѕарсер ищет в ќ«” в контенте файла указанный ключ и помещает в
        nReturnValue его целочисленное значение. nReturnValue нужно создать заранее.
        »м€ ключа в файле может быть любой длины, а также может содержать
        любые символы, кроме 2 символов конца строки \r и \n.
        «начение может быть только фиксированной длины, котора€ равна CSR_INTEGER_SIZE - 1.
        ѕарсер не видит пробелы и знаки табул€ции вокруг имени ключа/значени€,
        он считает их отступами.
    ѕј–јћ≈“–џ:
        nFilePointer        »ƒ_открытого_файла, полученный от csr_openFile / csr_createFile
        szKeyName[]         им€ ключа
        nReturnValue        сюда будет помещено значение ключа в виде целого числа
    ¬≈–Ќ≈“:
        код ошибки < 0 или 0 при успехе
*/

stock csr_getInteger ( nFilePointer, szKeyName[], & nReturnValue )
{
    // ----------------
    if // если »ƒ открытого файла указан неверно
    (
            nFilePointer < 0
        ||  nFilePointer >= CSR_MAX_OPENED_FILES
        ||  _csr_nSlotUsed[nFilePointer] != 1
    )
        return CSR_WRONG_SLOT; // вернуть код: неверный указатель на открытый файл
    // ----------------


    // ----------------
    new nKeyLen = strlen(szKeyName); // узнаем длину имени указанного ключа

    if ( nKeyLen <= 0 ) // если указан пустой ключ
        return CSR_KEY_NOT_FOUND;
    // ----------------


    // ----------------
    for // перебор и сравнение всех ключей файла с указанным ключом
    (
        new kPos = 0, curFilePos, found = 0;
        kPos < _csr_nKeysCount[nFilePointer];
        kPos++
    )
    {
        // ----------------
        found = 0; // флаг, найдена ли позици€ конца ключа = 0

        for // ищем позицию конца ключа
        (
            curFilePos = _csr_nDelimPos[nFilePointer][kPos] - 1; // текущ. поз. файла = поз. текущ. CSR_DELIMITER - 1
            curFilePos >= 0; // продолжать пока поз. файла >= 0
            curFilePos-- // после каждого повтора текущ. поз. файла -= 1
        )
        {
            switch ( _csr_szFileContent[nFilePointer]{curFilePos} ) // узнаем что за символ в текущ. поз. файла
            {
                case CSR_SPACE_CHAR :           continue; // если это пробельный символ, перейдем к пред. символу файла
                case CSR_STRING_DELIMITER :     break; // если это конец строки
                default : // если это другой символ
                {
                    found = 1; // позици€ конца ключа найдена
                    break; // конец цикла
                }
            }
        }

        // если позици€ конца ключа не найдена, переход к след. позиции CSR_DELIMITER
        if ( found != 1 ) continue;
        // ----------------


        // сравниваем посимвольно текущий ключ файла и указанный ключ
        for ( new curKeyPos = nKeyLen - 1;  curKeyPos >= 0;  curFilePos--, curKeyPos-- )
        {
            if
            (
                    curFilePos < 0 // если поз файла стала < 0
                ||  _csr_szFileContent[nFilePointer]{curFilePos} != szKeyName[curKeyPos] // если символы из ключей не равны
                ||  _csr_szFileContent[nFilePointer]{curFilePos} == CSR_STRING_DELIMITER // если символ из ключа это CSR_STRING_DELIMITER
            )
            {
                found = 0; // флаг, ключ не найден
                break; // конец сравнени€
            }
        }


        // ----------------
        if ( found != 0 ) // если указанный ключ найден в файле
        {
            // если найдено совпадение не целого ключа файла, а его окончани€ с указанным ключом
            if ( curFilePos >= 0 )
            {
                switch ( _csr_szFileContent[nFilePointer]{curFilePos} )
                {
                    case CSR_KEY_STARTS : {}
                    default: continue;
                }
            }


            // ----------------
            // текуща€ позици€ в файле будет на 1 больше текущей позиции CSR_DELIMITER
            curFilePos = _csr_nDelimPos[nFilePointer][kPos] + 1;

            // ищем позицию начала значени€, она будет помещена в curFilePos
            for ( ; ; curFilePos++ )
            {
                if ( curFilePos >= _csr_nFileSize[nFilePointer] ) break;

                switch ( _csr_szFileContent[nFilePointer]{curFilePos} )
                {
                    case CSR_SPACE_CHAR :   continue; // если это пробельный символ, перейдем к след. символу
                    default :               break; // если это другой символ
                }
            }
            // ----------------


            // ----------------
            new strValue[CSR_INTEGER_SIZE]; // временна€ строка дл€ численного значени€

            // скопируем посимвольно в strValue значение ключа из файла
            // воспользуемс€ созданной переменной found как позицией в возвращаемом значении
            for ( found = 0;  found < CSR_INTEGER_SIZE;  found++, curFilePos++ )
            {
                switch ( _csr_szFileContent[nFilePointer]{curFilePos} )
                {
                    case CSR_NUMBER_ENDS : // если это символ конца численного значени€
                    {
                        strValue[found] = 0; // запишем символ конца строки
                        break; // конец копировани€
                    }
                    default :
                        // копируем символ из файла в strValue
                        strValue[found] = _csr_szFileContent[nFilePointer]{curFilePos};
                }
            }

            strValue[CSR_INTEGER_SIZE - 1] = 0; // на вс€кий случай обрежем правильно строку

            nReturnValue = strval(strValue); // запишем в nReturnValue численное значение ключа

            return CSR_OK;
            // ----------------
        }
        // ----------------
    }
    // ----------------


    // ----------------
    return CSR_KEY_NOT_FOUND;
    // ----------------
}




/*
    ѕолучает из открытого INI файла дробное численное значение указанного ключа.
    ѕќƒ–ќЅЌ≈≈
        ѕарсер ищет в ќ«” в контенте файла указанный ключ и помещает в
        fReturnValue его дробное значение. fReturnValue нужно создать заранее.
        »м€ ключа в файле может быть любой длины, а также может содержать
        любые символы, кроме 2 символов конца строки \r и \n.
        «начение может быть только фиксированной длины, котора€ равна CSR_FLOAT_SIZE - 1.
        ѕарсер не видит пробелы и знаки табул€ции вокруг имени ключа/значени€,
        он считает их отступами.
    ѕј–јћ≈“–џ:
        nFilePointer        »ƒ_открытого_файла, полученный от csr_openFile / csr_createFile
        szKeyName[]         им€ ключа
        fReturnValue        сюда будет помещено значение ключа в виде дробного числа
    ¬≈–Ќ≈“:
        код ошибки < 0 или 0 при успехе
*/

stock csr_getFloat ( nFilePointer, szKeyName[], & Float: fReturnValue )
{
    // ----------------
    if // если »ƒ открытого файла указан неверно
    (
            nFilePointer < 0
        ||  nFilePointer >= CSR_MAX_OPENED_FILES
        ||  _csr_nSlotUsed[nFilePointer] != 1
    )
        return CSR_WRONG_SLOT; // вернуть код: неверный указатель на открытый файл
    // ----------------


    // ----------------
    new nKeyLen = strlen(szKeyName); // узнаем длину имени указанного ключа

    if ( nKeyLen <= 0 ) // если указан пустой ключ
        return CSR_KEY_NOT_FOUND;
    // ----------------


    // ----------------
    for // перебор и сравнение всех ключей файла с указанным ключом
    (
        new kPos = 0, curFilePos, found = 0;
        kPos < _csr_nKeysCount[nFilePointer];
        kPos++
    )
    {
        // ----------------
        found = 0; // флаг, найдена ли позици€ конца ключа = 0

        for // ищем позицию конца ключа
        (
            curFilePos = _csr_nDelimPos[nFilePointer][kPos] - 1; // текущ. поз. файла = поз. текущ. CSR_DELIMITER - 1
            curFilePos >= 0; // продолжать пока поз. файла >= 0
            curFilePos-- // после каждого повтора текущ. поз. файла -= 1
        )
        {
            switch ( _csr_szFileContent[nFilePointer]{curFilePos} ) // узнаем что за символ в текущ. поз. файла
            {
                case CSR_SPACE_CHAR :           continue; // если это пробельный символ, перейдем к пред. символу файла
                case CSR_STRING_DELIMITER :     break; // если это конец строки
                default : // если это другой символ
                {
                    found = 1; // позици€ конца ключа найдена
                    break; // конец цикла
                }
            }
        }

        // если позици€ конца ключа не найдена, переход к след. позиции CSR_DELIMITER
        if ( found != 1 ) continue;
        // ----------------


        // сравниваем посимвольно текущий ключ файла и указанный ключ
        for ( new curKeyPos = nKeyLen - 1;  curKeyPos >= 0;  curFilePos--, curKeyPos-- )
        {
            if
            (
                    curFilePos < 0 // если поз файла стала < 0
                ||  _csr_szFileContent[nFilePointer]{curFilePos} != szKeyName[curKeyPos] // если символы из ключей не равны
                ||  _csr_szFileContent[nFilePointer]{curFilePos} == CSR_STRING_DELIMITER // если символ из ключа это CSR_STRING_DELIMITER
            )
            {
                found = 0; // флаг, ключ не найден
                break; // конец сравнени€
            }
        }


        // ----------------
        if ( found != 0 ) // если указанный ключ найден в файле
        {
            // если найдено совпадение не целого ключа файла, а его окончани€ с указанным ключом
            if ( curFilePos >= 0 )
            {
                switch ( _csr_szFileContent[nFilePointer]{curFilePos} )
                {
                    case CSR_KEY_STARTS : {}
                    default: continue;
                }
            }


            // ----------------
            // текуща€ позици€ в файле будет на 1 больше текущей позиции CSR_DELIMITER
            curFilePos = _csr_nDelimPos[nFilePointer][kPos] + 1;

            // ищем позицию начала значени€, она будет помещена в curFilePos
            for ( ; ; curFilePos++ )
            {
                if ( curFilePos >= _csr_nFileSize[nFilePointer] ) break;

                switch ( _csr_szFileContent[nFilePointer]{curFilePos} )
                {
                    case CSR_SPACE_CHAR :   continue; // если это пробельный символ, перейдем к след. символу
                    default :               break; // если это другой символ
                }
            }
            // ----------------


            // ----------------
            new strValue[CSR_FLOAT_SIZE]; // временна€ строка дл€ дробного значени€

            // скопируем посимвольно в strValue значение ключа из файла
            // воспользуемс€ созданной переменной found как позицией в возвращаемом значении
            for ( found = 0;  found < CSR_INTEGER_SIZE;  found++, curFilePos++ )
            {
                switch ( _csr_szFileContent[nFilePointer]{curFilePos} )
                {
                    case CSR_NUMBER_ENDS : // если это символ конца численного значени€
                    {
                        strValue[found] = 0; // запишем символ конца строки
                        break; // конец копировани€
                    }
                    default :
                        // копируем символ из файла в strValue
                        strValue[found] = _csr_szFileContent[nFilePointer]{curFilePos};
                }
            }

            strValue[CSR_FLOAT_SIZE - 1] = 0; // на вс€кий случай обрежем правильно строку

            fReturnValue = floatstr(strValue); // запишем в fReturnValue дробное значение ключа

            return CSR_OK;
            // ----------------
        }
        // ----------------
    }
    // ----------------


    // ----------------
    return CSR_KEY_NOT_FOUND;
    // ----------------
}











/*
    »змен€ет/добавл€ет в открытый INI файл указанный ключ и его значение.
    ѕќƒ–ќЅЌ≈≈
        ѕарсер ищет в ќ«” в контенте файла указанный ключ и измен€ет его
        строковое значение на szKeyValue.
        ‘орматирование файла не мен€етс€. ≈сли только указанное им€ ключа
        не было найдено, тогда ключ и значение будут добавлены в конец файла.
        »м€ ключа/значение в файле может быть любой длины, а также может содержать
        любые символы, кроме 2 символов конца строки \r и \n. ≈сли эти символы есть
        в имени ключа или в значении, вы должны должны хорошо знать и осознавать
        последстви€.
    ѕј–јћ≈“–џ:
        nFilePointer        »ƒ_открытого_файла, полученный от csr_openFile / csr_createFile
        szKeyName[]         им€ ключа
        szKeyValue[]        строка со значением ключа
    ¬≈–Ќ≈“:
        код ошибки < 0 или 0 при успехе
*/

stock csr_setString ( nFilePointer, szKeyName[], szKeyValue[] )
{
    // ----------------
    if // если »ƒ открытого файла указан неверно
    (
            nFilePointer < 0
        ||  nFilePointer >= CSR_MAX_OPENED_FILES
        ||  _csr_nSlotUsed[nFilePointer] != 1
    )
        return CSR_WRONG_SLOT; // вернуть код: неверный указатель на открытый файл
    // ----------------


    // ----------------
    new nKeyLen = strlen(szKeyName); // узнаем длину имени указанного ключа

    if ( nKeyLen <= 0 ) // если указан пустой ключ
        return CSR_KEY_NOT_FOUND;
    // ----------------


    // ----------------
    for // перебор и сравнение всех ключей файла с указанным ключом
    (
        new kPos = 0, curFilePos, found;
        kPos < _csr_nKeysCount[nFilePointer];
        kPos++
    )
    {
        // ----------------
        found = 0; // флаг, найдена ли позици€ конца ключа = 0

        for // ищем позицию конца ключа
        (
            curFilePos = _csr_nDelimPos[nFilePointer][kPos] - 1; // текущ. поз. файла = поз. текущ. CSR_DELIMITER - 1
            curFilePos >= 0; // продолжать пока поз. файла >= 0
            curFilePos-- // после каждого повтора текущ. поз. файла -= 1
        )
        {
            switch ( _csr_szFileContent[nFilePointer]{curFilePos} ) // узнаем что за символ в текущ. поз. файла
            {
                case CSR_SPACE_CHAR :           continue; // если это пробельный символ, перейдем к пред. символу файла
                case CSR_STRING_DELIMITER :     break; // если это конец строки
                default : // если это другой символ
                {
                    found = 1; // позици€ конца ключа найдена
                    break; // конец цикла
                }
            }
        }

        // если позици€ конца ключа не найдена, переход к след. позиции CSR_DELIMITER
        if ( found != 1 ) continue;
        // ----------------


        // сравниваем посимвольно текущий ключ файла и указанный ключ
        for ( new curKeyPos = nKeyLen - 1;  curKeyPos >= 0;  curFilePos--, curKeyPos-- )
        {
            if
            (
                    curFilePos < 0 // если поз файла стала < 0
                ||  _csr_szFileContent[nFilePointer]{curFilePos} != szKeyName[curKeyPos] // если символы из ключей не равны
                ||  _csr_szFileContent[nFilePointer]{curFilePos} == CSR_STRING_DELIMITER // если символ из ключа это CSR_STRING_DELIMITER
            )
            {
                found = 0; // флаг, ключ не найден
                break; // конец сравнени€
            }
        }


        if ( found != 0 ) // если указанный ключ Ќј…ƒ≈Ќ в файле
        {
            // если найдено совпадение не целого ключа файла, а его окончани€ с указанным ключом
            if ( curFilePos >= 0 )
            {
                switch ( _csr_szFileContent[nFilePointer]{curFilePos} )
                {
                    case CSR_KEY_STARTS : {}
                    default: continue;
                }
            }


            // ----------------
            // текуща€ позици€ в файле будет на 1 больше текущей позиции CSR_DELIMITER
            curFilePos = _csr_nDelimPos[nFilePointer][kPos] + 1;

            // ищем позицию начала значени€, она будет помещена в curFilePos
            for ( ; ; curFilePos++ )
            {
                if ( curFilePos >= _csr_nFileSize[nFilePointer] ) break;

                switch ( _csr_szFileContent[nFilePointer]{curFilePos} )
                {
                    case CSR_SPACE_CHAR :   continue; // если это пробельный символ, перейдем к след. символу
                    default :               break; // если это другой символ
                }
            }
            // ----------------


            // ----------------
            new nValueLen = strlen(szKeyValue); // узнаем размер значени€ указанного ключа

            // если будущий размер файла превышает лимит
            if ( ( curFilePos + nValueLen ) >= CSR_MAX_FILE_SIZE )
                return CSR_TOO_LARGE_FILE; // вернем код ошибки о переполнении файла
            // ----------------


            // ----------------
            new fileValueStartPos = curFilePos; // сохраним позицию начала значени€

            // ищем позицию конца значени€, она будет помещена в curFilePos
            for ( ; ; curFilePos++ )
            {
                if ( curFilePos >= _csr_nFileSize[nFilePointer] ) break;

                switch ( _csr_szFileContent[nFilePointer]{curFilePos} )
                {
                    case CSR_STRING_ENDS :  break; // если это конец строки - стоп
                    default :               continue; // если это другой символ, перейдем к след. символу
                }
            }

            // вычислим смещение оставшихс€ позиций дл€ CSR_DELIMITER после изменени€ значени€
            new filePosOffset = nValueLen - ( /*текущ длина значени€*/ curFilePos - fileValueStartPos );
            // ----------------


            if ( _csr_nFileBusy[nFilePointer] != 0 ) // если пр€мо сейчас файл измен€етс€ другой функцией
                return CSR_WRITE_ERROR; // вернем код ошибки при записи в файл


            // ----------------
            _csr_nFileBusy[nFilePointer] = 1; // флаг: файл измен€етс€ = 1

            if ( filePosOffset != 0 ) // если длины старого и нового значений разные
            {
                if ( filePosOffset < 0 ) // если длина нового значени€ меньше
                {
                    for // копируем символы, сто€щие после текущего значени€ на их новые места,
                    ( // которые теперь будут ближе к началу файла
                        ;
                        curFilePos < _csr_nFileSize[nFilePointer];
                        curFilePos++
                    )
                        _csr_szFileContent[nFilePointer]{ curFilePos + filePosOffset } =
                            _csr_szFileContent[nFilePointer]{curFilePos};
                }
                else if ( filePosOffset > 0 ) // если длина нового значени€ больше
                {
                    new fileValueEndPos = curFilePos;

                    for // копируем символы, сто€щие после текущего значени€ на их новые места,
                    ( // начина€ с конца файла
                        curFilePos = _csr_nFileSize[nFilePointer] - 1;
                        curFilePos >= fileValueEndPos;
                        curFilePos--
                    )
                        _csr_szFileContent[nFilePointer]{ curFilePos + filePosOffset } =
                            _csr_szFileContent[nFilePointer]{curFilePos};
                }

                // изменим позиции всех CSR_DELIMITER, которые находились после текущего CSR_DELIMITER
                for ( kPos++;  kPos < _csr_nKeysCount[nFilePointer];  kPos++ )
                    _csr_nDelimPos[nFilePointer][kPos] += filePosOffset;

                _csr_nFileSize[nFilePointer] += filePosOffset; // изменим размер файла
                _csr_szFileContent[nFilePointer]{ _csr_nFileSize[nFilePointer] } = 0; // конец строки дл€ конца файла
            }

            curFilePos = fileValueStartPos; // текущ поз файла = поз начала старого значени€
            for // запишем новое значение поверх старого
            (
                new valuePos = 0;
                valuePos < nValueLen;
                curFilePos++, valuePos++
            )
                _csr_szFileContent[nFilePointer]{curFilePos} = szKeyValue[valuePos];

            _csr_nFileChanged[nFilePointer]     = 1; // флаг: файл изменен = 1
            _csr_nFileBusy[nFilePointer]        = 0; // флаг: файл измен€етс€ = 0

            return CSR_OK;
            // ----------------
        }
    }
    // ----------------


    //
    // если указанный ключ Ќ≈ Ќј…ƒ≈Ќ в файле
    //

    // ----------------
    new nValueLen = strlen(szKeyValue); // узнаем размер значени€ ключа

    // если будущий размер файла превышает лимит
    if ( ( _csr_nFileSize[nFilePointer] + 5 + nKeyLen + nValueLen ) >= CSR_MAX_FILE_SIZE )
        return CSR_TOO_LARGE_FILE; // вернем код ошибки о переполнении файла
    // ----------------


    // ----------------
    if ( _csr_nFileBusy[nFilePointer] != 0 ) // если пр€мо сейчас файл измен€етс€ другой функцией
        return CSR_WRITE_ERROR; // вернем код ошибки при записи в файл

    _csr_nFileBusy[nFilePointer] = 1; // флаг: файл измен€етс€ = 1
    // ----------------


    // ----------------
    if // если последний символ файла не €вл€етс€ разделителем строк
    (
            _csr_nFileSize[nFilePointer] > 0
        &&  _csr_szFileContent[nFilePointer]{ _csr_nFileSize[nFilePointer] - 1 } != CSR_STRING_DELIMITER
    )
    {
        // вставим в конец файла перевод каретки и разделитель строк
        _csr_szFileContent[nFilePointer]{ _csr_nFileSize[nFilePointer] }        = '\r';
        _csr_szFileContent[nFilePointer]{ _csr_nFileSize[nFilePointer] + 1 }    = CSR_STRING_DELIMITER;

        _csr_nFileSize[nFilePointer] += 2; // увеличим размер файла на 2
    }

    new curFilePos, strPos; // будут временным хранилищами позиций в файле/ключе/значении

    for // добавим посимвольно им€ ключа в файл
    (
        curFilePos = _csr_nFileSize[nFilePointer], strPos = 0;
        strPos < nKeyLen;
        curFilePos++, strPos++
    )
        _csr_szFileContent[nFilePointer]{curFilePos} = szKeyName[strPos];

    _csr_szFileContent[nFilePointer]{ curFilePos++ }                = ' '; // после ключа добавим пробел

    _csr_nDelimPos[nFilePointer][ _csr_nKeysCount[nFilePointer] ]   = curFilePos; // добавим новую позицию CSR_DELIMITER
    _csr_nKeysCount[nFilePointer]++; // кол-во ключей в файле +1

    _csr_szFileContent[nFilePointer]{ curFilePos++ }                = CSR_DELIMITER; // после пробела выше добавим CSR_DELIMITER
    _csr_szFileContent[nFilePointer]{ curFilePos++ }                = ' '; // после CSR_DELIMITER добавим пробел

    // добавим посимвольно значение ключа в файл
    for ( strPos = 0;  strPos < nValueLen;  curFilePos++, strPos++ )
        _csr_szFileContent[nFilePointer]{curFilePos} = szKeyValue[strPos];

    _csr_szFileContent[nFilePointer]{curFilePos}    = 0; // добавим символ конца строки
    _csr_nFileSize[nFilePointer]                    = curFilePos; // изменим размер файла
    _csr_nFileChanged[nFilePointer]                 = 1; // флаг: файл изменен = 1
    _csr_nFileBusy[nFilePointer]                    = 0; // флаг: файл измен€етс€ = 0

    return CSR_OK;
    // ----------------
}




/*
    »змен€ет/добавл€ет в открытый INI файл указанный ключ и его целочисленное значение.
    ѕќƒ–ќЅЌ≈≈
        ѕарсер ищет в ќ«” в контенте файла указанный ключ и измен€ет его
        целочисленное значение на nKeyValue.
        ‘орматирование файла не мен€етс€, если только указанное им€ ключа
        не было найдено, тогда ключ и значение будут добавлены в конец файла.
        »м€ ключа в файле может быть любой длины, а также может содержать
        любые символы, кроме 2 символов конца строки \r и \n. ≈сли вы в качестве
        значени€ указываете число больше, чем cellmax или меньше, чем cellmin,
        вы должны должны хорошо знать и осознавать последстви€.
    ѕј–јћ≈“–џ:
        nFilePointer        »ƒ_открытого_файла, полученный от csr_openFile / csr_createFile
        szKeyName[]         им€ ключа
        nKeyValue           целочисленное значение ключа
    ¬≈–Ќ≈“:
        код ошибки < 0 или 0 при успехе
*/

stock csr_setInteger ( nFilePointer, szKeyName[], nKeyValue )
{
    // ----------------
    if // если »ƒ открытого файла указан неверно
    (
            nFilePointer < 0
        ||  nFilePointer >= CSR_MAX_OPENED_FILES
        ||  _csr_nSlotUsed[nFilePointer] != 1
    )
        return CSR_WRONG_SLOT; // вернуть код: неверный указатель на открытый файл
    // ----------------


    // ----------------
    new nKeyLen = strlen(szKeyName); // узнаем длину имени указанного ключа

    if ( nKeyLen <= 0 ) // если указан пустой ключ
        return CSR_KEY_NOT_FOUND;
    // ----------------


    // ----------------
    for // перебор и сравнение всех ключей файла с указанным ключом
    (
        new kPos = 0, curFilePos, found;
        kPos < _csr_nKeysCount[nFilePointer];
        kPos++
    )
    {
        // ----------------
        found = 0; // флаг, найдена ли позици€ конца ключа = 0

        for // ищем позицию конца ключа
        (
            curFilePos = _csr_nDelimPos[nFilePointer][kPos] - 1; // текущ. поз. файла = поз. текущ. CSR_DELIMITER - 1
            curFilePos >= 0; // продолжать пока поз. файла >= 0
            curFilePos-- // после каждого повтора текущ. поз. файла -= 1
        )
        {
            switch ( _csr_szFileContent[nFilePointer]{curFilePos} ) // узнаем что за символ в текущ. поз. файла
            {
                case CSR_SPACE_CHAR :           continue; // если это пробельный символ, перейдем к пред. символу файла
                case CSR_STRING_DELIMITER :     break; // если это конец строки
                default : // если это другой символ
                {
                    found = 1; // позици€ конца ключа найдена
                    break; // конец цикла
                }
            }
        }

        // если позици€ конца ключа не найдена, переход к след. позиции CSR_DELIMITER
        if ( found != 1 ) continue;
        // ----------------


        // сравниваем посимвольно текущий ключ файла и указанный ключ
        for ( new curKeyPos = nKeyLen - 1;  curKeyPos >= 0;  curFilePos--, curKeyPos-- )
        {
            if
            (
                    curFilePos < 0 // если поз файла стала < 0
                ||  _csr_szFileContent[nFilePointer]{curFilePos} != szKeyName[curKeyPos] // если символы из ключей не равны
                ||  _csr_szFileContent[nFilePointer]{curFilePos} == CSR_STRING_DELIMITER // если символ из ключа это CSR_STRING_DELIMITER
            )
            {
                found = 0; // флаг, ключ не найден
                break; // конец сравнени€
            }
        }


        if ( found != 0 ) // если указанный ключ Ќј…ƒ≈Ќ в файле
        {
            // если найдено совпадение не целого ключа файла, а его окончани€ с указанным ключом
            if ( curFilePos >= 0 )
            {
                switch ( _csr_szFileContent[nFilePointer]{curFilePos} )
                {
                    case CSR_KEY_STARTS : {}
                    default: continue;
                }
            }


            // ----------------
            // текуща€ позици€ в файле будет на 1 больше текущей позиции CSR_DELIMITER
            curFilePos = _csr_nDelimPos[nFilePointer][kPos] + 1;

            // ищем позицию начала значени€, она будет помещена в curFilePos
            for ( ; ; curFilePos++ )
            {
                if ( curFilePos >= _csr_nFileSize[nFilePointer] ) break;

                switch ( _csr_szFileContent[nFilePointer]{curFilePos} )
                {
                    case CSR_SPACE_CHAR :   continue; // если это пробельный символ, перейдем к след. символу
                    default :               break; // если это другой символ
                }
            }
            // ----------------


            // ----------------
            new szKeyValue[CSR_INTEGER_SIZE]; // создадим строку дл€ хранени€ целочисленного значени€
            format( szKeyValue, CSR_INTEGER_SIZE, "%i", nKeyValue );
            // ----------------


            // ----------------
            new nValueLen = strlen(szKeyValue); // узнаем размер значени€ указанного ключа

            // если будущий размер файла превышает лимит
            if ( ( curFilePos + nValueLen ) >= CSR_MAX_FILE_SIZE )
                return CSR_TOO_LARGE_FILE; // вернем код ошибки о переполнении файла
            // ----------------


            // ----------------
            new fileValueStartPos = curFilePos; // сохраним позицию начала значени€

            // ищем позицию конца значени€, она будет помещена в curFilePos
            for ( ; ; curFilePos++ )
            {
                if ( curFilePos >= _csr_nFileSize[nFilePointer] ) break;

                switch ( _csr_szFileContent[nFilePointer]{curFilePos} )
                {
                    case CSR_NUMBER_ENDS :  break; // если это конец числа - стоп
                    default :               continue; // если это другой символ, перейдем к след. символу
                }
            }

            // вычислим смещение оставшихс€ позиций дл€ CSR_DELIMITER после изменени€ значени€
            new filePosOffset = nValueLen - ( /*текущ длина значени€*/ curFilePos - fileValueStartPos );
            // ----------------


            if ( _csr_nFileBusy[nFilePointer] != 0 ) // если пр€мо сейчас файл измен€етс€ другой функцией
                return CSR_WRITE_ERROR; // вернем код ошибки при записи в файл


            // ----------------
            _csr_nFileBusy[nFilePointer] = 1; // флаг: файл измен€етс€ = 1

            if ( filePosOffset != 0 ) // если длины старого и нового значений разные
            {
                if ( filePosOffset < 0 ) // если длина нового значени€ меньше
                {
                    for // копируем символы, сто€щие после текущего значени€ на их новые места,
                    ( // которые теперь будут ближе к началу файла
                        ;
                        curFilePos < _csr_nFileSize[nFilePointer];
                        curFilePos++
                    )
                        _csr_szFileContent[nFilePointer]{ curFilePos + filePosOffset } =
                            _csr_szFileContent[nFilePointer]{curFilePos};
                }
                else if ( filePosOffset > 0 ) // если длина нового значени€ больше
                {
                    new fileValueEndPos = curFilePos;

                    for // копируем символы, сто€щие после текущего значени€ на их новые места,
                    ( // начина€ с конца файла
                        curFilePos = _csr_nFileSize[nFilePointer] - 1;
                        curFilePos >= fileValueEndPos;
                        curFilePos--
                    )
                        _csr_szFileContent[nFilePointer]{ curFilePos + filePosOffset } =
                            _csr_szFileContent[nFilePointer]{curFilePos};
                }

                // изменим позиции всех CSR_DELIMITER, которые находились после текущего CSR_DELIMITER
                for ( kPos++;  kPos < _csr_nKeysCount[nFilePointer];  kPos++ )
                    _csr_nDelimPos[nFilePointer][kPos] += filePosOffset;

                _csr_nFileSize[nFilePointer] += filePosOffset; // изменим размер файла
                _csr_szFileContent[nFilePointer]{ _csr_nFileSize[nFilePointer] } = 0; // конец строки дл€ конца файла
            }

            curFilePos = fileValueStartPos; // текущ поз файла = поз начала старого значени€
            for // запишем новое значение поверх старого
            (
                new valuePos = 0;
                valuePos < nValueLen;
                curFilePos++, valuePos++
            )
                _csr_szFileContent[nFilePointer]{curFilePos} = szKeyValue[valuePos];

            _csr_nFileChanged[nFilePointer]     = 1; // флаг: файл изменен = 1
            _csr_nFileBusy[nFilePointer]        = 0; // флаг: файл измен€етс€ = 0

            return CSR_OK;
            // ----------------
        }
    }
    // ----------------


    //
    // если указанный ключ Ќ≈ Ќј…ƒ≈Ќ в файле
    //

    // ----------------
    new szKeyValue[CSR_INTEGER_SIZE]; // создадим строку дл€ хранени€ целочисленного значени€
    format( szKeyValue, CSR_INTEGER_SIZE, "%i", nKeyValue );
    // ----------------


    // ----------------
    new nValueLen = strlen(szKeyValue); // узнаем размер значени€ ключа

    // если будущий размер файла превышает лимит
    if ( ( _csr_nFileSize[nFilePointer] + 5 + nKeyLen + nValueLen ) >= CSR_MAX_FILE_SIZE )
        return CSR_TOO_LARGE_FILE; // вернем код ошибки о переполнении файла
    // ----------------


    // ----------------
    if ( _csr_nFileBusy[nFilePointer] != 0 ) // если пр€мо сейчас файл измен€етс€ другой функцией
        return CSR_WRITE_ERROR; // вернем код ошибки при записи в файл

    _csr_nFileBusy[nFilePointer] = 1; // флаг: файл измен€етс€ = 1
    // ----------------


    // ----------------
    if // если последний символ файла не €вл€етс€ разделителем строк
    (
            _csr_nFileSize[nFilePointer] > 0
        &&  _csr_szFileContent[nFilePointer]{ _csr_nFileSize[nFilePointer] - 1 } != CSR_STRING_DELIMITER
    )
    {
        // вставим в конец файла перевод каретки и разделитель строк
        _csr_szFileContent[nFilePointer]{ _csr_nFileSize[nFilePointer] }        = '\r';
        _csr_szFileContent[nFilePointer]{ _csr_nFileSize[nFilePointer] + 1 }    = CSR_STRING_DELIMITER;

        _csr_nFileSize[nFilePointer] += 2; // увеличим размер файла на 2
    }

    new curFilePos, strPos; // будут временным хранилищами позиций в файле/ключе/значении

    for // добавим посимвольно им€ ключа в файл
    (
        curFilePos = _csr_nFileSize[nFilePointer], strPos = 0;
        strPos < nKeyLen;
        curFilePos++, strPos++
    )
        _csr_szFileContent[nFilePointer]{curFilePos} = szKeyName[strPos];

    _csr_szFileContent[nFilePointer]{ curFilePos++ }                = ' '; // после ключа добавим пробел

    _csr_nDelimPos[nFilePointer][ _csr_nKeysCount[nFilePointer] ]   = curFilePos; // добавим новую позицию CSR_DELIMITER
    _csr_nKeysCount[nFilePointer]++; // кол-во ключей в файле +1

    _csr_szFileContent[nFilePointer]{ curFilePos++ }                = CSR_DELIMITER; // после пробела выше добавим CSR_DELIMITER
    _csr_szFileContent[nFilePointer]{ curFilePos++ }                = ' '; // после CSR_DELIMITER добавим пробел

    // добавим посимвольно значение ключа в файл
    for ( strPos = 0;  strPos < nValueLen;  curFilePos++, strPos++ )
        _csr_szFileContent[nFilePointer]{curFilePos} = szKeyValue[strPos];

    _csr_szFileContent[nFilePointer]{curFilePos}    = 0; // добавим символ конца строки
    _csr_nFileSize[nFilePointer]                    = curFilePos; // изменим размер файла
    _csr_nFileChanged[nFilePointer]                 = 1; // флаг: файл изменен = 1
    _csr_nFileBusy[nFilePointer]                    = 0; // флаг: файл измен€етс€ = 0

    return CSR_OK;
    // ----------------
}




/*
    »змен€ет/добавл€ет в открытый INI файл указанный ключ и его дробное численное значение.
    ѕќƒ–ќЅЌ≈≈
        ѕарсер ищет в ќ«” в контенте файла указанный ключ и измен€ет его
        дробное значение на fKeyValue.
        ‘орматирование файла не мен€етс€, если только указанное им€ ключа
        не было найдено, тогда ключ и значение будут добавлены в конец файла.
        »м€ ключа в файле может быть любой длины, а также может содержать
        любые символы, кроме 2 символов конца строки \r и \n. ≈сли вы в качестве
        значени€ указываете очень большое/маленькое дробное число, вы должны
        хорошо знать и осознавать последстви€.
    ѕј–јћ≈“–џ:
        nFilePointer        »ƒ_открытого_файла, полученный от csr_openFile / csr_createFile
        szKeyName[]         им€ ключа
        fKeyValue           дробное численное значение ключа
    ¬≈–Ќ≈“:
        код ошибки < 0 или 0 при успехе
*/

stock csr_setFloat ( nFilePointer, szKeyName[], Float: fKeyValue )
{
    // ----------------
    if // если »ƒ открытого файла указан неверно
    (
            nFilePointer < 0
        ||  nFilePointer >= CSR_MAX_OPENED_FILES
        ||  _csr_nSlotUsed[nFilePointer] != 1
    )
        return CSR_WRONG_SLOT; // вернуть код: неверный указатель на открытый файл
    // ----------------


    // ----------------
    new nKeyLen = strlen(szKeyName); // узнаем длину имени указанного ключа

    if ( nKeyLen <= 0 ) // если указан пустой ключ
        return CSR_KEY_NOT_FOUND;
    // ----------------


    // ----------------
    for // перебор и сравнение всех ключей файла с указанным ключом
    (
        new kPos = 0, curFilePos, found;
        kPos < _csr_nKeysCount[nFilePointer];
        kPos++
    )
    {
        // ----------------
        found = 0; // флаг, найдена ли позици€ конца ключа = 0

        for // ищем позицию конца ключа
        (
            curFilePos = _csr_nDelimPos[nFilePointer][kPos] - 1; // текущ. поз. файла = поз. текущ. CSR_DELIMITER - 1
            curFilePos >= 0; // продолжать пока поз. файла >= 0
            curFilePos-- // после каждого повтора текущ. поз. файла -= 1
        )
        {
            switch ( _csr_szFileContent[nFilePointer]{curFilePos} ) // узнаем что за символ в текущ. поз. файла
            {
                case CSR_SPACE_CHAR :           continue; // если это пробельный символ, перейдем к пред. символу файла
                case CSR_STRING_DELIMITER :     break; // если это конец строки
                default : // если это другой символ
                {
                    found = 1; // позици€ конца ключа найдена
                    break; // конец цикла
                }
            }
        }

        // если позици€ конца ключа не найдена, переход к след. позиции CSR_DELIMITER
        if ( found != 1 ) continue;
        // ----------------


        // сравниваем посимвольно текущий ключ файла и указанный ключ
        for ( new curKeyPos = nKeyLen - 1;  curKeyPos >= 0;  curFilePos--, curKeyPos-- )
        {
            if
            (
                    curFilePos < 0 // если поз файла стала < 0
                ||  _csr_szFileContent[nFilePointer]{curFilePos} != szKeyName[curKeyPos] // если символы из ключей не равны
                ||  _csr_szFileContent[nFilePointer]{curFilePos} == CSR_STRING_DELIMITER // если символ из ключа это CSR_STRING_DELIMITER
            )
            {
                found = 0; // флаг, ключ не найден
                break; // конец сравнени€
            }
        }


        if ( found != 0 ) // если указанный ключ Ќј…ƒ≈Ќ в файле
        {
            // если найдено совпадение не целого ключа файла, а его окончани€ с указанным ключом
            if ( curFilePos >= 0 )
            {
                switch ( _csr_szFileContent[nFilePointer]{curFilePos} )
                {
                    case CSR_KEY_STARTS : {}
                    default: continue;
                }
            }


            // ----------------
            // текуща€ позици€ в файле будет на 1 больше текущей позиции CSR_DELIMITER
            curFilePos = _csr_nDelimPos[nFilePointer][kPos] + 1;

            // ищем позицию начала значени€, она будет помещена в curFilePos
            for ( ; ; curFilePos++ )
            {
                if ( curFilePos >= _csr_nFileSize[nFilePointer] ) break;

                switch ( _csr_szFileContent[nFilePointer]{curFilePos} )
                {
                    case CSR_SPACE_CHAR :   continue; // если это пробельный символ, перейдем к след. символу
                    default :               break; // если это другой символ
                }
            }
            // ----------------


            // ----------------
            new szKeyValue[CSR_FLOAT_SIZE]; // создадим строку дл€ хранени€ дробного значени€
            format( szKeyValue, CSR_FLOAT_SIZE, "%f", fKeyValue ); // поместим строковое значение fKeyValue в szKeyValue
            // ----------------


            // ----------------
            new nValueLen = strlen(szKeyValue); // узнаем размер значени€ указанного ключа

            // если будущий размер файла превышает лимит
            if ( ( curFilePos + nValueLen ) >= CSR_MAX_FILE_SIZE )
                return CSR_TOO_LARGE_FILE; // вернем код ошибки о переполнении файла
            // ----------------


            // ----------------
            new fileValueStartPos = curFilePos; // сохраним позицию начала значени€

            // ищем позицию конца значени€, она будет помещена в curFilePos
            for ( ; ; curFilePos++ )
            {
                if ( curFilePos >= _csr_nFileSize[nFilePointer] ) break;

                switch ( _csr_szFileContent[nFilePointer]{curFilePos} )
                {
                    case CSR_NUMBER_ENDS :  break; // если это конец числа - стоп
                    default :               continue; // если это другой символ, перейдем к след. символу
                }
            }

            // вычислим смещение оставшихс€ позиций дл€ CSR_DELIMITER после изменени€ значени€
            new filePosOffset = nValueLen - ( /*текущ длина значени€*/ curFilePos - fileValueStartPos );
            // ----------------


            if ( _csr_nFileBusy[nFilePointer] != 0 ) // если пр€мо сейчас файл измен€етс€ другой функцией
                return CSR_WRITE_ERROR; // вернем код ошибки при записи в файл


            // ----------------
            _csr_nFileBusy[nFilePointer] = 1; // флаг: файл измен€етс€ = 1

            if ( filePosOffset != 0 ) // если длины старого и нового значений разные
            {
                if ( filePosOffset < 0 ) // если длина нового значени€ меньше
                {
                    for // копируем символы, сто€щие после текущего значени€ на их новые места,
                    ( // которые теперь будут ближе к началу файла
                        ;
                        curFilePos < _csr_nFileSize[nFilePointer];
                        curFilePos++
                    )
                        _csr_szFileContent[nFilePointer]{ curFilePos + filePosOffset } =
                            _csr_szFileContent[nFilePointer]{curFilePos};
                }
                else if ( filePosOffset > 0 ) // если длина нового значени€ больше
                {
                    new fileValueEndPos = curFilePos;

                    for // копируем символы, сто€щие после текущего значени€ на их новые места,
                    ( // начина€ с конца файла
                        curFilePos = _csr_nFileSize[nFilePointer] - 1;
                        curFilePos >= fileValueEndPos;
                        curFilePos--
                    )
                        _csr_szFileContent[nFilePointer]{ curFilePos + filePosOffset } =
                            _csr_szFileContent[nFilePointer]{curFilePos};
                }

                // изменим позиции всех CSR_DELIMITER, которые находились после текущего CSR_DELIMITER
                for ( kPos++;  kPos < _csr_nKeysCount[nFilePointer];  kPos++ )
                    _csr_nDelimPos[nFilePointer][kPos] += filePosOffset;

                _csr_nFileSize[nFilePointer] += filePosOffset; // изменим размер файла
                _csr_szFileContent[nFilePointer]{ _csr_nFileSize[nFilePointer] } = 0; // конец строки дл€ конца файла
            }

            curFilePos = fileValueStartPos; // текущ поз файла = поз начала старого значени€
            for // запишем новое значение поверх старого
            (
                new valuePos = 0;
                valuePos < nValueLen;
                curFilePos++, valuePos++
            )
                _csr_szFileContent[nFilePointer]{curFilePos} = szKeyValue[valuePos];

            _csr_nFileChanged[nFilePointer]     = 1; // флаг: файл изменен = 1
            _csr_nFileBusy[nFilePointer]        = 0; // флаг: файл измен€етс€ = 0

            return CSR_OK;
            // ----------------
        }
    }
    // ----------------


    //
    // если указанный ключ Ќ≈ Ќј…ƒ≈Ќ в файле
    //

    // ----------------
    new szKeyValue[CSR_FLOAT_SIZE]; // создадим строку дл€ хранени€ дробного значени€
    format( szKeyValue, CSR_FLOAT_SIZE, "%f", fKeyValue ); // поместим строковое значение fKeyValue в szKeyValue
    // ----------------


    // ----------------
    new nValueLen = strlen(szKeyValue); // узнаем размер значени€ ключа

    // если будущий размер файла превышает лимит
    if ( ( _csr_nFileSize[nFilePointer] + 5 + nKeyLen + nValueLen ) >= CSR_MAX_FILE_SIZE )
        return CSR_TOO_LARGE_FILE; // вернем код ошибки о переполнении файла
    // ----------------


    // ----------------
    if ( _csr_nFileBusy[nFilePointer] != 0 ) // если пр€мо сейчас файл измен€етс€ другой функцией
        return CSR_WRITE_ERROR; // вернем код ошибки при записи в файл

    _csr_nFileBusy[nFilePointer] = 1; // флаг: файл измен€етс€ = 1
    // ----------------


    // ----------------
    if // если последний символ файла не €вл€етс€ разделителем строк
    (
            _csr_nFileSize[nFilePointer] > 0
        &&  _csr_szFileContent[nFilePointer]{ _csr_nFileSize[nFilePointer] - 1 } != CSR_STRING_DELIMITER
    )
    {
        // вставим в конец файла перевод каретки и разделитель строк
        _csr_szFileContent[nFilePointer]{ _csr_nFileSize[nFilePointer] }        = '\r';
        _csr_szFileContent[nFilePointer]{ _csr_nFileSize[nFilePointer] + 1 }    = CSR_STRING_DELIMITER;

        _csr_nFileSize[nFilePointer] += 2; // увеличим размер файла на 2
    }

    new curFilePos, strPos; // будут временным хранилищами позиций в файле/ключе/значении

    for // добавим посимвольно им€ ключа в файл
    (
        curFilePos = _csr_nFileSize[nFilePointer], strPos = 0;
        strPos < nKeyLen;
        curFilePos++, strPos++
    )
        _csr_szFileContent[nFilePointer]{curFilePos} = szKeyName[strPos];

    _csr_szFileContent[nFilePointer]{ curFilePos++ }                = ' '; // после ключа добавим пробел

    _csr_nDelimPos[nFilePointer][ _csr_nKeysCount[nFilePointer] ]   = curFilePos; // добавим новую позицию CSR_DELIMITER
    _csr_nKeysCount[nFilePointer]++; // кол-во ключей в файле +1

    _csr_szFileContent[nFilePointer]{ curFilePos++ }                = CSR_DELIMITER; // после пробела выше добавим CSR_DELIMITER
    _csr_szFileContent[nFilePointer]{ curFilePos++ }                = ' '; // после CSR_DELIMITER добавим пробел

    // добавим посимвольно значение ключа в файл
    for ( strPos = 0;  strPos < nValueLen;  curFilePos++, strPos++ )
        _csr_szFileContent[nFilePointer]{curFilePos} = szKeyValue[strPos];

    _csr_szFileContent[nFilePointer]{curFilePos}    = 0; // добавим символ конца строки
    _csr_nFileSize[nFilePointer]                    = curFilePos; // изменим размер файла
    _csr_nFileChanged[nFilePointer]                 = 1; // флаг: файл изменен = 1
    _csr_nFileBusy[nFilePointer]                    = 0; // флаг: файл измен€етс€ = 0

    return CSR_OK;
    // ----------------
}




/*
    ”дал€ет из открытого INI файла указанный ключ и его значение.
    ѕќƒ–ќЅЌ≈≈
        ѕарсер ищет в ќ«” в контенте файла указанный ключ и удал€ет найденную
        пару ключ/значение.
        »м€ ключа/значение в файле может быть любой длины,
        а также может содержать любые символы, кроме 2 символов конца строки \r и \n.
        ≈сли эти символы есть в имени ключа или в значении,
        вы должны должны хорошо знать и осознавать последстви€.
    ѕј–јћ≈“–џ:
        nFilePointer        »ƒ_открытого_файла, полученный от csr_openFile / csr_createFile
        szKeyName[]         им€ ключа
    ¬≈–Ќ≈“:
        код ошибки < 0 или 0 при успехе
*/

stock csr_removeKey ( nFilePointer, szKeyName[] )
{
    // ----------------
    if // если »ƒ открытого файла указан неверно
    (
            nFilePointer < 0
        ||  nFilePointer >= CSR_MAX_OPENED_FILES
        ||  _csr_nSlotUsed[nFilePointer] != 1
    )
        return CSR_WRONG_SLOT; // вернуть код: неверный указатель на открытый файл
    // ----------------


    // ----------------
    new nKeyLen = strlen(szKeyName); // узнаем длину имени указанного ключа

    if ( nKeyLen <= 0 ) // если указан пустой ключ
        return CSR_KEY_NOT_FOUND;
    // ----------------


    // ----------------
    for // перебор и сравнение всех ключей файла с указанным ключом
    (
        new kPos = 0, curFilePos, found;
        kPos < _csr_nKeysCount[nFilePointer];
        kPos++
    )
    {
        // ----------------
        found = 0; // флаг, найдена ли позици€ конца ключа = 0

        for // ищем позицию конца ключа
        (
            curFilePos = _csr_nDelimPos[nFilePointer][kPos] - 1; // текущ. поз. файла = поз. текущ. CSR_DELIMITER - 1
            curFilePos >= 0; // продолжать пока поз. файла >= 0
            curFilePos-- // после каждого повтора текущ. поз. файла -= 1
        )
        {
            switch ( _csr_szFileContent[nFilePointer]{curFilePos} ) // узнаем что за символ в текущ. поз. файла
            {
                case CSR_SPACE_CHAR :           continue; // если это пробельный символ, перейдем к пред. символу файла
                case CSR_STRING_DELIMITER :     break; // если это конец строки
                default : // если это другой символ
                {
                    found = 1; // позици€ конца ключа найдена
                    break; // конец цикла
                }
            }
        }

        // если позици€ конца ключа не найдена, переход к след. позиции CSR_DELIMITER
        if ( found != 1 ) continue;
        // ----------------


        // сравниваем посимвольно текущий ключ файла и указанный ключ
        for ( new curKeyPos = nKeyLen - 1;  curKeyPos >= 0;  curFilePos--, curKeyPos-- )
        {
            if
            (
                    curFilePos < 0 // если поз файла стала < 0
                ||  _csr_szFileContent[nFilePointer]{curFilePos} != szKeyName[curKeyPos] // если символы из ключей не равны
                ||  _csr_szFileContent[nFilePointer]{curFilePos} == CSR_STRING_DELIMITER // если символ из ключа это CSR_STRING_DELIMITER
            )
            {
                found = 0; // флаг, ключ не найден
                break; // конец сравнени€
            }
        }


        if ( found != 0 ) // если указанный ключ Ќј…ƒ≈Ќ в файле
        {
            // если найдено совпадение не целого ключа файла, а его окончани€ с указанным ключом
            if ( curFilePos >= 0 )
            {
                switch ( _csr_szFileContent[nFilePointer]{curFilePos} )
                {
                    case CSR_KEY_STARTS : {}
                    default: continue;
                }
            }


            // сохраним позицию начала ключа
            new keyStartPos = ( curFilePos <= 0 ) ? 0 : curFilePos + 1;


            // ----------------
            // текуща€ позици€ в файле будет на 1 больше текущей позиции CSR_DELIMITER
            curFilePos = _csr_nDelimPos[nFilePointer][kPos] + 1;

            // ищем позицию начала значени€, она будет помещена в curFilePos
            for ( ; ; curFilePos++ )
            {
                if ( curFilePos >= _csr_nFileSize[nFilePointer] ) break;

                switch ( _csr_szFileContent[nFilePointer]{curFilePos} )
                {
                    case CSR_SPACE_CHAR :   continue; // если это пробельный символ, перейдем к след. символу
                    default :               break; // если это другой символ
                }
            }
            // ----------------


            // ----------------
            // ищем позицию конца значени€, она будет помещена в curFilePos
            for ( ; ; curFilePos++ )
            {
                if ( curFilePos >= _csr_nFileSize[nFilePointer] ) break;

                switch ( _csr_szFileContent[nFilePointer]{curFilePos} )
                {
                    case CSR_STRING_ENDS :  break; // если это конец строки - стоп
                    default :               continue; // если это другой символ, перейдем к след. символу
                }
            }

            // вычислим смещение оставшихс€ позиций дл€ CSR_DELIMITER после изменени€ значени€
            new filePosOffset = keyStartPos - curFilePos;
            // ----------------


            if ( _csr_nFileBusy[nFilePointer] != 0 ) // если пр€мо сейчас файл измен€етс€ другой функцией
                return CSR_WRITE_ERROR; // вернем код ошибки при записи в файл


            // ----------------
            _csr_nFileBusy[nFilePointer] = 1; // флаг: файл измен€етс€ = 1

            // затираем контент ключа, следующими за ним данными файла
            for ( ; curFilePos <= _csr_nFileSize[nFilePointer]; curFilePos++ )
                _csr_szFileContent[nFilePointer]{ curFilePos + filePosOffset } =
                    _csr_szFileContent[nFilePointer]{curFilePos};

            // затираем текущий CSR_DELIMITER, и мен€ем позиции последующих CSR_DELIMITER
            for ( ;  kPos < _csr_nKeysCount[nFilePointer];  kPos++ )
                _csr_nDelimPos[nFilePointer][kPos] = _csr_nDelimPos[nFilePointer][kPos + 1] + filePosOffset;

            _csr_nKeysCount[nFilePointer]--;
            _csr_nFileSize[nFilePointer] += filePosOffset; // изменим размер файла
            _csr_szFileContent[nFilePointer]{ _csr_nFileSize[nFilePointer] } = 0; // конец строки дл€ конца файла

            _csr_nFileChanged[nFilePointer]     = 1; // флаг: файл изменен = 1
            _csr_nFileBusy[nFilePointer]        = 0; // флаг: файл измен€етс€ = 0

            return CSR_OK;
            // ----------------
        }
    }
    // ----------------


    //
    // если указанный ключ Ќ≈ Ќј…ƒ≈Ќ в файле
    //

    // ----------------
    return CSR_KEY_NOT_FOUND;
    // ----------------
}




/*
    ¬озвращает строку с описанием указанного кода ошибки на русском €зыке.
    ѕќƒ–ќЅЌ≈≈
        ≈сли кака€-то функци€ вам вернула не 0 (всЄ в пор€дке), а отрицательное
        значение, значит, имела место ошибка. ≈сли вы хотите вывести в любой лог или
        в диалог человеческое описание этой ошибки, то передайте этой функции код
        ошибки и она вам вернет описание этой ошибки на русском €зыке.
        ќписание ошибок довольно длинные и превышают размер в 128 символов,
        поэтому выводить эти описани€ в чате не рекомендуетс€!
    ѕј–јћ≈“–џ:
        nErrorCode      код ошибки, полученный от любой функции
    ¬≈–Ќ≈“:
        строку с человеческим описанием ошибки, под указанным кодом
    ѕ–»ћ≈–:
        new ini = csr_openFile("несуществующий файл"); // пытаемс€ открыть несуществующий файл
        if ( ini < 0 ) print( csr_getErrorInfo(ini) );
        else
        {
            new number, result = csr_getInteger( ini, "несуществующий ключ", number ); // пробуем получить значение несуществующего ключа
            if ( result < 0 ) print( csr_getErrorInfo(result) );
            csr_closeFile(ini);
        }
*/

stock csr_getErrorInfo ( nErrorCode )
{
    new error_ms[200] = "ќшибок нет";

    if ( nErrorCode >= 0 ) return error_ms;

    switch ( nErrorCode )
    {
        case CSR_FILE_NOT_FOUND :     error_ms = "INI файл, указанный в `csr_openFile`, не существует, возможно, указан неверный путь к нему";
        case CSR_FILE_ALREADY_EXIST : error_ms = "INI файл, указанный в `csr_createFile`, уже существует, укажите другое им€/путь к файлу";
        case CSR_TOO_LARGE_FILE :     error_ms = "Ќевозможно добавить новый ключ в INI файл, т.к. размер INI файла превысит допустимый лимит в " #CSR_MAX_FILE_SIZE " символ(ов), или будет превышен лимит в " #CSR_MAX_KEYS_IN_FILE " ключей";
        case CSR_WRONG_PATH_SIZE :    error_ms = "ƒлина пути к INI файлу, указанного в `csr_openFile` / `csr_createFile`, превышает лимит в " #CSR_MAX_FILENAME_SIZE " символ(ов)";
        case CSR_READ_ERROR :         error_ms = "ќшибка при чтении INI файла с диска, возможно, файл зан€т другим процессом";
        case CSR_WRITE_ERROR :        error_ms = "ќшибка при записи содержимого INI файла на диск, возможно, файл зан€т другим процессом";
        case CSR_NO_FREE_SLOT :       error_ms = "Ћимит в " #CSR_MAX_OPENED_FILES " одновременно открытых INI файлов исчерпан, поэтому открыть/создать еще 1 файл нельз€, пока не закрыт хоть 1 из открытых файлов";
        case CSR_WRONG_SLOT :         error_ms = "”казан неверный ID открытого INI файла, возможно, при открытии INI файла произошла ошибка, поэтому вместо ID файла вы получили код ошибки";
        case CSR_KEY_NOT_FOUND :      error_ms = "”казанный ключ не найден в открытом INI файле";
        case CSR_WRONG_RETURN_SIZE :  error_ms = "ѕри попытке чтени€ строкового значени€ из INI файла, последний параметр `nSizeOfReturn` в `csr_getString` оказалс€ <= 0, укажите вручную значение > 0 дл€ него";

        default:                      error_ms = "Ќеизвестна€ ошибка";
    }

    return error_ms;
}
