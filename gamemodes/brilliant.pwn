/* 

	?????????????????????????????????????????????????????     ????????????????????????     ????????????????????????????
	?????????????????????????????????????????????????????     ????????????????????????     ????????????????????????????
	?????????????????????????????????????????????????????     ????????????????????????     ????????????????????????????


	CEO: Roma Omegov
	Gamemode Developer: Folinq Weard
	Gamemode Developer: Selena_Lunysh (Female)

	Небольшой регламент написания кода для того, чтобы все было строго по правилам ясно и понятно:

	Все системы имеют свой тег, например система машин имеет тег VEH_, это значит, что все переменные этой системы начинаются с этого тега:
	new VEH_id[100];
	new VEH_colors[10];

	а также все функции:

	VEH_CreatePlayerVehicle(playerid) {
		return 1;
	}

	Весь код этой системы находится по пути: includes / VEH / ...... 
	НО: именно в includes, а не pawno/includes, в pawno/includes будут находится инклуды, которые будем подгружать извне, а не наши собственные

	Также я (folinq weard) займусь разработкой API. Но впринципе создавать функции может кто-угодно, поэтому сойдемся на том, чтобы функции были
	максимально универсальными и удобными, а также перед каждой API функцией должна находиться краткая документация!:

	// Создание машины игрока, создает машину из базы данных
	// VEH_CreatePlayerVehicle(playerid) {
		........
	}

	Инклуды, подгружаемые извне, должны подключаться раньше всех!



*/


// СИСТЕМНЫЕ ИНКЛУДЫ
#include <a_samp>
#include <includes/API.inc>


// ПОДГРУЖАЕМЫЕ ИНКЛУДЫ
#include <YSF.inc>
#include <YSI/y_hooks>
#include <mdialog>
#include <Pawn.CMD>
#include <Pawn.RakNet>
#include <foreach>
#include <mxINI>



// оставить место под системные хуки



// СИСТЕМЫ



// Система машин
